#!/usr/bin/env python
"""
Command line tool that takes a data set and a mixture fit
results directory and calculates membership probabilities.
"""

import argparse
import numpy as np
from pathlib import Path

from chronostar.component.spherespacetimecomponent import SphereSpaceTimeComponent
from chronostar.mixture.componentmixture import ComponentMixture


def init_argparse() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        # usage="%(prog)s [OPTION] config_file data_file [membership]",
        description="Calculate membership probabilities given a data set and a"
                    "finished (or mimicked) fitted mixture result",
    )
    parser.add_argument(
        "data",
        help="The data file, an (n_sample, n_feature) array stored as a "
        ".npy file.",
    )
    parser.add_argument(
        "-c",
        "--covs",
        help="The covariance file, an (n_sample, n_feature, n_feature) "
             "array stored as a .npy file.",
    )
    parser.add_argument(
        "-z",
        "--membership",
        default=None,
        help="Optional file of membership probabilities, an "
        "(n_samples, n_components) array, stored as a .npy file.",
    )
    parser.add_argument(
        "-r",
        "--results",
        help="Path to the results directory, holding the parameters"
             " of the components and the relative weights"
    )
    parser.add_argument(
        "-o",
        "--output",
        help="Output directory",
        default=".",
    )
    return parser


if __name__ == '__main__':
    # Parse command line arguments
    parser = init_argparse()
    args = parser.parse_args()

    # Set up save directory (lest we simply crash at the end)
    savedir = Path(args.output)

    if not savedir.is_dir():
        savedir.mkdir(parents=True)

    # Read in numpy array of data
    data = np.load(args.data)

    if args.covs:
        # If we have data covariances, append to data array
        covs = np.load(args.covs)
        data = np.vstack((data.T, covs.reshape(-1, 36).T)).T

    results_dir = Path(args.results)
    assert results_dir.is_dir()

    # Load in weights, should be an array of shape (n_comps)
    weights = np.load(results_dir / 'weights.npy')

    n_comps = len(weights)

    # Construct component objects from stored parameters
    # Currently hardcoded only for SphereSpaceTimeComponent
    comps: list[SphereSpaceTimeComponent] = []
    comp_pars = []
    for comp_ix in range(n_comps):
        # Attempt to read a nested file structure
        pars_file = results_dir / f"comp_{comp_ix:03}_params.npy"
        comps.append(SphereSpaceTimeComponent(np.load(pars_file)))

    # We have our weights ans components. Lets initialise our mixture model
    mixture = ComponentMixture(
        init_weights=weights,
        init_components=tuple(comps),
    )

    # Since our components' parameters are set, we can evaluate membership probabilities
    memb_probs = mixture.estimate_membership_prob(data)

    np.save(savedir / 'calced_membership.npy', memb_probs)
