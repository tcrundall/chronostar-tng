#!/usr/bin/env python

import argparse
from typing import Optional
from astropy.table import Table
from pathlib import Path
from matplotlib.patches import Ellipse
import matplotlib.pyplot as plt
from matplotlib.axes import Axes
from matplotlib import cm
import numpy as np
from numpy import float64
from numpy.typing import NDArray

from chronostar.component.spherespacetimecomponent import SphereSpaceTimeComponent


def eigsorted(cov):
    vals, vecs = np.linalg.eigh(cov)
    order = vals.argsort()[::-1]
    return vals[order], vecs[:, order]

def plot_cov_ellipse(
    cov : NDArray[float64],
    pos: NDArray[float64],
    nstd: float = 2.,
    ax: Optional[Axes] = None,
    with_line: bool = True,
    zorder: int = 4,
    **kwargs
) -> Ellipse:
    """
    Plots an `nstd` sigma error ellipse based on the specified covariance
    matrix (`cov`). Additional keyword arguments are passed on to the
    ellipse patch artist.
    Parameters
    ----------
        cov : The 2x2 covariance matrix to base the ellipse on
        pos : The location of the center of the ellipse. Expects a 2-element
            sequence of [x0, y0].
        nstd : The radius of the ellipse in numbers of standard deviations.
            Defaults to 2 standard deviations.
        ax : The axis that the ellipse will be plotted on. Defaults to the
            current axis.
        zorder: Integer
            The priority of overlay. The higher the number, the more 'ontop
            of' the plot the ellipse will be.
        Additional keyword arguments are pass on to the ellipse patch.
    Returns
    -------
        A matplotlib ellipse artist
    """
    if ax is None:
        ax = plt.gca()
    assert ax is not None

    # largest eigenvalue is first
    vals, vecs = eigsorted(cov)

    theta = np.degrees(np.arctan2(*vecs[:, 0][::-1]))

    # Width and height are "full" widths, not radius
    width, height = 2 * nstd * np.sqrt(vals)
    ellip = Ellipse(
        xy=pos,         # type: ignore
        width=width,
        height=height,
        angle=theta,
        **kwargs
    )

    if 'alpha' not in kwargs.keys():
        ellip.set_alpha(0.3)
    if 'color' not in kwargs.keys():# and 'c' not in kwargs.keys():
        ellip.set_facecolor('red')

    ellip.zorder = zorder

    ax.add_patch(ellip)

    # THEN just f***ing plot an invisible line across the ellipse.
    if with_line:
        # brute forcing axes limits so they contain ellipse patch
        # maybe a cleaner way of doing this, but I couldn't work it out
        x_extent = 0.5*(abs(width*np.cos(np.radians(theta))) +
                        abs(height*np.sin(np.radians(theta))))
        y_extent = 0.5*(abs(width*np.sin(np.radians(theta))) +
                        abs(height*np.cos(np.radians(theta))))

        lx = pos[0] - x_extent
        ux = pos[0] + x_extent
        ly = pos[1] - y_extent
        uy = pos[1] + y_extent
        ax.plot((lx, ux), (ly, uy), alpha=0.)

    return ellip

def plot_covariance(ax, mean, covariance, dim1, dim2, **kwargs):
    pos = mean[np.ix_([dim1, dim2])]
    cov_2d = np.copy(covariance[np.ix_([dim1,dim2],[dim1,dim2])])
    plot_cov_ellipse(cov_2d, pos, ax=ax, **kwargs)


def init_argparse() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        description="Prepare data files for input into Chronostar"
    )
    # parser.add_argument("-c", "--config", help="The configuration file")
    parser.add_argument(
        "-f",
        "--features",
        help="Which planes in feature space to plot. Encoded as indices: "
             "-p 0,1.0,2.0,3 would plot (feat_0 vs feat_1), (feat_0 vs feat_2)"
             " and (feat_0 vs feat_3), with the first feat on the x-axis",
        default="",
    )
    parser.add_argument(
        "-p",
        "--photom",
        help="Whether to plot photometry. Requires astrodata to have columns"
             " phot_g_mean_mag, g_rp and parallax",
        action=argparse.BooleanOptionalAction,
    )
    parser.add_argument(
        "-d",
        "--astrodata",
        help="The astro data file, stored as a .fits file",
    )
    parser.add_argument(
        "-m",
        "--means",
        help="Means of data in feature space",
        default="data_means.npy"
    )
    parser.add_argument(
        "-z",
        "--membership",
        help="Membership probability of each sample to each component",
        default="membership.npy"
    )
    parser.add_argument(
        "-c",
        "--covs",
        help="Covariances of data in feature space",
        default="data_covs.npy",
    )
    parser.add_argument(
        "-o",
        "--output",
        help="Output directory",
        default=".",
    )
    parser.add_argument(
        "-r",
        "--results",
        help="Path to the final results directory, holding the parameters"
             " of the components"
    )
    parser.add_argument(
        "-s",
        "--sourceids",
        help="An array of gaia source ids denoting which stars to plot",
    )
    parser.add_argument(
        "-l",
        "--labels",
        help="Labels for each feature, e.g. "
             "'X [pc],Y [pc],Z [pc],U [km/s],V [km/s],W [km/s]'",
        default='X [pc],Y [pc],Z [pc],U [km/s],V [km/s],W [km/s]',
    )

    parser.add_argument(
        "-b",
        "--background",
        help="Color background comps as grey. Note, need to provide component"
             " results",
        action=argparse.BooleanOptionalAction,
    )

    return parser


if __name__ == '__main__':
    parser = init_argparse()
    args = parser.parse_args()

    # Ensure output diretory is valid
    outdir = Path(args.output)
    outdir.mkdir(parents=True, exist_ok=True)

    # Load in relevant data

    membership = None
    if Path(args.membership).is_file():
        membership = np.load(Path(args.membership))
    else:
        raise UserWarning(
            f"No {args.membership=} file provided. I think this is required..."
        )
    n_comps = len(membership.T)

    data_means = None
    if Path(args.means).is_file():
        data_means = np.load(Path(args.means))
    else:
        print(f"No {args.means=} file provided.")

    data_covs = None
    if Path(args.covs).is_file():
        data_covs = np.load(Path(args.covs))
    else:
        print(f"No {args.covs=} file provided.")

    astro_data = None
    if args.astrodata and Path(args.astrodata).is_file():
        astro_data = Table.read(Path(args.astrodata))
    else:
        print(f"No {args.astrodata=} file provided.")

    source_ids = None
    if args.sourceids and Path(args.sourceids).is_file():
        source_ids = np.load((Path(args.sourceids)))

    # Construct component objects from stored parameters
    # Currently hardcoded only for SphereSpaceTimeComponent
    comps: list[SphereSpaceTimeComponent] = []
    if args.results and Path(args.results).is_dir():
        results_dir = Path(args.results)
        comp_pars = []
        comp_ix = 0
        for comp_ix in range(n_comps):
            # Attempt to read a nested file structure
            try:
                pars_file = results_dir / f"comp_{comp_ix:03}" / "params.npy"
                comp_pars.append(np.load(pars_file))
            except FileNotFoundError:
                pass
            # Attempt to read a flat file structure
            try:
                pars_file = results_dir / f"comp_{comp_ix:03}_params.npy"
                comp_pars.append(np.load(pars_file))
            except FileNotFoundError:
                pass 

        for comp_par in comp_pars:
            comps.append(SphereSpaceTimeComponent(comp_par))

    if args.background:
        assert comps, "If toggling background, results directory must be provided"
        aged_comps_map = [c.age > 1 for c in comps]
        bg_comps_map = [not m for m in aged_comps_map]
    else:
        aged_comps_map = n_comps * [True]

    labels = args.labels.split(',')

    # Consts for plotting alphas
    ALPHA_MAX = 0.5
    ALPHA_MIN = 0.2
    ALPHA_SPAN = ALPHA_MAX - ALPHA_MIN

    # Consts for scatter plot marker sizes
    MARKERSIZE_MAX = 10
    MARKERSIZE_MIN = 0.3
    MARKERSIZE_SPAN = MARKERSIZE_MAX - MARKERSIZE_MIN

    # Prepare colors
    GRAY_COLOR = np.array([0.4, 0.4, 0.4, 1])
    n_aged_comps = sum(aged_comps_map)
    aged_colors = cm.jet(np.arange(n_aged_comps) / n_aged_comps)    # type: ignore
    np.random.seed(0)
    np.random.shuffle(aged_colors)
    colors = np.tile(GRAY_COLOR, (n_comps, 1))
    colors[aged_comps_map] = aged_colors


    # Prepare component-size dependent alphas and markersizes
    comp_weights = membership.sum(axis=0) / membership.sum()
    weight_span = max(comp_weights) - min(comp_weights)
    scale_w2a = ALPHA_SPAN / weight_span
    alphas = ALPHA_MAX - (comp_weights - min(comp_weights)) * scale_w2a
    scale_w2m = MARKERSIZE_SPAN / weight_span
    marker_sizes = MARKERSIZE_MAX - (comp_weights - min(comp_weights)) * scale_w2m

    # Plot photometry
    if args.photom:
        assert astro_data is not None
        # Want to plot absolute magnitude against colour

        # Absolute magnitude apparent magnitude - 5 Ã— log_10(distance) + 5
        # MAX_STARS = 10_000
        distance = 1000. / astro_data['parallax']
        abs_mag = astro_data['phot_g_mean_mag'] - 5*np.log10(distance) + 5

        fig, ax = plt.subplots()
        if membership is None:
            membership = np.ones((len(astro_data), 1))

        n_comps = len(membership.T)
        comp_weights = membership.sum(axis=0) / membership.sum()
        weight_span = np.ptp(comp_weights)
        for comp_ix, comp_membs in enumerate(membership.T):
            comp_weight = comp_weights[comp_ix]
            # Scale each point size by number of members for component
            # Apply colour based on membership
            cmp_msk = np.where(comp_membs > 0.5)
            alpha = ALPHA_MAX - ALPHA_SPAN/weight_span * (comp_weight - min(comp_weights))
            ax.scatter(
                astro_data['g_rp'][cmp_msk],
                abs_mag[cmp_msk],
                s=1/comp_weight,
                color=colors[comp_ix],      # type: ignore
                alpha=alpha,
                label=f'Comp {comp_ix}',
            )
            ax.set_xlabel('G - R')
            ax.set_ylabel('G Mag')
            ax.set_xlim(-0.1, 1.5)
            ax.invert_yaxis()

        ax.legend()

        fig.savefig(str(outdir / 'photometry.pdf'))

    if args.features:
        plt.clf()
        assert data_means is not None
        # data_means = data_means[:100]

        try:
            feat_ixs = np.array(
                [pair.split(',') for pair in args.features.split('.')],
                dtype=int,
            )
        except ValueError:
            raise UserWarning("Features provided incorrectly. See help")

        n_subplots = len(feat_ixs)
        n_cols = int(np.ceil(np.sqrt(n_subplots)))
        n_rows = int(np.ceil(n_subplots / n_cols))

        fig, axes = plt.subplots(n_rows, n_cols, squeeze=False)
        axes = np.array(axes)

        if membership is None:
            membership = np.ones((len(data_means), 1))

        # Plot each plane on an axis
        for (x_feat, y_feat), ax in zip(feat_ixs, axes.flat):
            # Plot each component's members separately
            for comp_ix, comp_membs in enumerate(membership.T):
                comp_weight = comp_weights[comp_ix]

                # Infer membership probabilty > 50% as member
                cmp_msk = np.where(comp_membs > 0.5)

                label = None
                if comps and aged_comps_map[comp_ix]:
                    label = f'{comp_ix:>2}: {comps[comp_ix].age:5.1f}Myr'

                # Scale each point size by number of members for component
                ax.scatter(
                    data_means[:, x_feat][cmp_msk],
                    data_means[:, y_feat][cmp_msk],
                    s=marker_sizes[comp_ix],
                    # color=cm.jet(comp_ix/n_comps),      # type: ignore
                    color=colors[comp_ix],      # type: ignore
                    alpha=alphas[comp_ix],
                    label=label,
                )

            # Plot covariance ellipses for component members
            xlim = ax.get_xlim()
            ylim = ax.get_ylim()
            if data_covs is not None:
                for comp_ix, comp_membs in enumerate(membership.T):
                    if aged_comps_map[comp_ix]:
                        cmp_msk = np.where(comp_membs > 0.5)
                        for star_mean, star_cov in zip(
                            data_means[cmp_msk], data_covs[cmp_msk]
                        ):
                            plot_covariance(
                                ax, star_mean, star_cov, x_feat, y_feat,
                                color=colors[comp_ix],
                                ls='-',
                                with_line=False,
                                alpha=0.2,
                                fill=True,
                                nstd=1,
                            )
            # ax.set_xlim(xlim)
            # ax.set_ylim(ylim)

            # # Do this because we don't want component ellipses to change plot span
            # xlim = ax.get_xlim()
            # ylim = ax.get_ylim()

            # Plot each component, if provided
            for comp_ix, comp in enumerate(comps):
                plot_covariance(
                    ax, comp.mean, comp.covariance, x_feat, y_feat, color=colors[comp_ix],
                    fill=False,
                    ls='--',
                    alpha=alphas[comp_ix],
                    with_line=False,
                    lw=1.,
                    nstd=2,
                )
            
            ax.set_xlim(xlim)
            ax.set_ylim(ylim)

            ax.set_xlabel(labels[x_feat])
            ax.set_ylabel(labels[y_feat])

        axes.flat[-1].legend(loc=3)

        fig.set_size_inches(n_cols * 4.5, n_rows * 4)
        fig.tight_layout()
        fig.savefig(str(outdir / 'features.pdf'))
        fig.savefig(str(outdir / 'features.svg'))
