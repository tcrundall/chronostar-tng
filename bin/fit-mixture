#!/usr/bin/env python
"""
Command line tool that takes a data set and a config file
and performs a fit of an N-component mixture model.

The fit can be initialised with membership probabilities,
or left to initialise (badly) randomly.
"""
import argparse
from collections import defaultdict
import copy
import numpy as np
import os
from pathlib import Path
from typing import Type
import yaml

from chronostar.base import BaseComponent, BaseMixture


DEFAULT_CONFIG_PARAMS = {
    'modules': {
        'component': 'SphereSpaceTimeComponent',
        'mixture': 'ComponentMixture'
    },
    'component': {},
    'mixture': {},
    'run': {
        'savedir': 'output',
    }
}


def import_component(component) -> Type[BaseComponent]:
    if component == 'SphereSpaceTimeComponent':
        from chronostar.component.spherespacetimecomponent import\
            SphereSpaceTimeComponent
        return SphereSpaceTimeComponent
    elif component == 'SpaceComponent':
        from chronostar.component.spacecomponent import SpaceComponent
        return SpaceComponent
    else:
        raise UserWarning(f"Implementation {component=} not found.")


def import_mixture(mixture) -> Type[BaseMixture]:
    if mixture == 'ComponentMixture':
        from chronostar.mixture.componentmixture import ComponentMixture
        return ComponentMixture
    else:
        raise UserWarning(f"Implementation {mixture=} not found.")


def init_argparse() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        # usage="%(prog)s [OPTION] config_file data_file [membership]",
        description="Fit a single component to data",
    )
    parser.add_argument("-c", "--config", help="The configuration file")
    parser.add_argument(
        "ncomps",
        type=int,
        help="The number of components to use in the mixture model fit"
    )
    parser.add_argument(
        "data",
        help="The data file, an (n_sample, n_feature) array stored as a "
        ".npy file.",
    )
    parser.add_argument(
        "membership",
        nargs='?',
        default=None,
        help="Optional file of membership probabilities, an "
        "(n_samples, n_components) array, stored as a .npy file.",
    )

    return parser


def parse_config(config_file):
    # Set up config with script defaults
    config_params = defaultdict(dict)
    config_params.update(copy.deepcopy(DEFAULT_CONFIG_PARAMS))

    # Read in config file
    if args.config:
        acceptable_keys = [
            'modules',
            'component',
            'introducer',
            'icpool',
            'mixture',
            'run',
        ]
        with open(args.config, "r") as stream:
            try:
                user_config_params = yaml.safe_load(stream)
            except yaml.YAMLError as exc:
                raise exc

        # Update config_params accordingly
        for key in user_config_params.keys():
            if key not in acceptable_keys:
                raise UserWarning(f"[CONFIG] {key=} not recognised!")
            config_params[key].update(user_config_params[key])

    return config_params


if __name__ == '__main__':
    # Parse command line arguments
    parser = init_argparse()
    args = parser.parse_args()

    # Set up config with script defaults
    config_params = parse_config(args.config)

    # Set up save directory (lest we simply crash at the end)
    savedir = Path(config_params['run']['savedir'])
    if savedir.is_dir():
        print(f"WARNING: Output directory \"{savedir}\" already exists")
        print("         Results may get jumbled with previous ones")
    if not savedir.is_dir():
        os.mkdir(savedir)
    for i in range(args.ncomps):
        compdir = savedir / f"comp_{i:03}"
        if not compdir.is_dir():
            os.mkdir(compdir)

    # Read in numpy array of data
    data = np.load(args.data)

    # Read in membership array
    membership = None
    if args.membership:
        membership = np.load(args.membership)

    # Import appropriate component implementation
    CompClass = import_component(
        config_params["modules"]["component"]
    )
    MixtureClass = import_mixture(
        config_params["modules"]["mixture"]
    )

    # Configure classes
    CompClass.configure(**config_params['component'])
    MixtureClass.configure(**config_params['mixture'])

    if membership is not None:
        init_weights = membership
    else:
        init_weights = np.ones(args.ncomps) / args.ncomps

    init_comps = [CompClass() for _ in range(args.ncomps)]

    mixture = MixtureClass(init_weights, init_comps)
    mixture.fit(data)
    memberships = mixture.estimate_membership_prob(data)
    np.save(savedir / "memberships.npy", memberships)

    # Output result
    weights, components, *extra = mixture.get_parameters()
    np.save(savedir / "weights.npy", weights)
    for i, component in enumerate(components):
        compdir = savedir / f"comp_{i:03}"
        params = component.get_parameters()
        for j, param in enumerate(params):
            outfile = compdir / f"param_{j}.npy"
            np.save(outfile, param)

    # Display some simple logging info to output
    # (obviously should be substituted for some form of logging later)
    print("-------------------")
    print("----- RESULTS -----")
    print("-------------------")
    np.set_printoptions(suppress=True)
    for i, (weight, comp) in enumerate(zip(weights, components)):
        print(f"--- component {i} ---")
        print(f" weight: {weight}")
        for j, param in enumerate(comp.get_parameters()):
            print(f"    - param {j}")
            print(param)
